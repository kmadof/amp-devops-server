# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  srcDirectory: '$(Build.SourcesDirectory)/src'
  testDirectory: '$(Build.SourcesDirectory)/test'
  projectName: 'Admin'
  projectPath: '$(srcDirectory)/$(projectName)/$(projectName).csproj'
  buildConfiguration: 'Release'

pool:
  vmImage: 'windows-latest'

steps:
- task: DotNetCoreCLI@2
  displayName: Restore nuget packages (src)
  inputs:
    command: restore
    projects: '$(projectPath)'

- task: DotNetCoreCLI@2
  displayName: Restore nuget packages (test)
  inputs:
    command: restore
    projects: '$(projectPath)'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '$(projectPath)'
    arguments: '--configuration $(buildConfiguration)'

# You just added coverlet.collector to use 'XPlat Code Coverage'
#- task: DotNetCoreCLI@2
#  displayName: Test
#  inputs:
#    command: test
#    projects: '*Test/*.csproj'
#    arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true'
#    workingDirectory: $(testDirectory)

#- task: DotNetCoreCLI@2
#  inputs:
#    command: custom
#    custom: tool
#    arguments: install --tool-path . dotnet-reportgenerator-globaltool
#  displayName: Install ReportGenerator tool

#- script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
#  displayName: Create reports

#- task: PublishCodeCoverageResults@1
#  displayName: 'Publish code coverage'
#  inputs:
#    codeCoverageTool: Cobertura
#    summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml  
